#line 1 "C:/Users/UCHIHA/Desktop/embedded system project/start_game.c"
void make_rectangle(int x1,int y1,int x2,int y2);
int start_posx=180;
int start_posy=210;
int collisionx1=0;
int collisionx2=0;
int collisiony1=0;
int collisiony2=0;
int fre1[6]={258,300,320,240,290,400};
int duration1[6]={150,180,120,150,130,200};
int flagx;
int flagy;
int coordinatesx1[20]={5,5,39,58,109,172,196,228,165,80,122,8,232,216,260,260,0,0,0};
int coordinatesy1[20]={6,70,115,147,204,59,96,140,145,15,67,219,19,203,0,0,0,0,240};
int coordinatesx2[20]={27,73,58,115,157,196,243,255,189,146,130,66,257,234,265,320,320,1,319};
int coordinatesy2[20]={40,87,170,169,232,115,115,182,178,35,110,235,67,240,240,240,1,240,240};
void move_up();
void move_down();
void move_left();
void move_right();
void options_menu();
void collision();
void flags();
int rand();
int top_score;
int scorevalue;
void scoreprint();
void AdcConfiguration();
unsigned int getAdcReading();
void EEPROM_24C02_WrSingle(unsigned short wAddr, unsigned short wData);



void start_game(){
const code char car_jpg[1051] = {
0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x78,
0x00, 0x78, 0x00, 0x00, 0xFF, 0xE1, 0x00, 0x22, 0x45, 0x78, 0x69, 0x66, 0x00, 0x00, 0x4D, 0x4D,
0x00, 0x2A, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x01, 0x12, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xED, 0x00, 0x6A, 0x50, 0x68, 0x6F, 0x74,
0x6F, 0x73, 0x68, 0x6F, 0x70, 0x20, 0x33, 0x2E, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4D, 0x04, 0x04,
0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x1C, 0x01, 0x5A, 0x00, 0x03, 0x1B, 0x25, 0x47, 0x1C, 0x02,
0x00, 0x00, 0x02, 0x00, 0x00, 0x1C, 0x02, 0x74, 0x00, 0x39, 0xC2, 0xA9, 0x20, 0x50, 0x69, 0x78,
0x65, 0x6C, 0x2D, 0x50, 0x6C, 0x61, 0x79, 0x20, 0x2D, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F,
0x2F, 0x77, 0x77, 0x77, 0x2E, 0x72, 0x65, 0x64, 0x62, 0x75, 0x62, 0x62, 0x6C, 0x65, 0x2E, 0x63,
0x6F, 0x6D, 0x2F, 0x70, 0x65, 0x6F, 0x70, 0x6C, 0x65, 0x2F, 0x70, 0x69, 0x78, 0x65, 0x6C, 0x2D,
0x70, 0x6C, 0x61, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x05, 0x03, 0x03, 0x03, 0x03, 0x03, 0x06, 0x04,
0x04, 0x03, 0x05, 0x07, 0x06, 0x07, 0x07, 0x07, 0x06, 0x07, 0x07, 0x08, 0x09, 0x0B, 0x09, 0x08,
0x08, 0x0A, 0x08, 0x07, 0x07, 0x0A, 0x0D, 0x0A, 0x0A, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x07, 0x09,
0x0E, 0x0F, 0x0D, 0x0C, 0x0E, 0x0B, 0x0C, 0x0C, 0x0C, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x02, 0x02,
0x02, 0x03, 0x03, 0x03, 0x06, 0x03, 0x03, 0x06, 0x0C, 0x08, 0x07, 0x08, 0x0C, 0x0C, 0x0C, 0x0C,
0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xFF, 0xC0,
0x00, 0x11, 0x08, 0x00, 0x0F, 0x00, 0x0F, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11,
0x01, 0xFF, 0xC4, 0x00, 0x1F, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05,
0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21,
0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23,
0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16, 0x17,
0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A,
0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A,
0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5,
0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1,
0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xC4, 0x00, 0x1F, 0x01, 0x00, 0x03,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x11, 0x00,
0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77, 0x00,
0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13,
0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0, 0x15,
0x62, 0x72, 0xD1, 0x0A, 0x16, 0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26, 0x27,
0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88,
0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4,
0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE2,
0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
0xFA, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0xFB,
0x6B, 0xFE, 0x0B, 0x19, 0xFB, 0x6A, 0xFE, 0xD1, 0x1F, 0xB3, 0xEF, 0xC4, 0xFF, 0x00, 0x0C, 0xF8,
0x2B, 0xE1, 0x1E, 0x93, 0xE1, 0xBB, 0x7F, 0x0C, 0xF8, 0xCB, 0x4A, 0x8A, 0xDE, 0x7D, 0x7E, 0x03,
0x0D, 0xFF, 0x00, 0x89, 0xAD, 0x75, 0x2B, 0x8B, 0x8B, 0x88, 0xA3, 0x8A, 0xD2, 0xCD, 0xAE, 0x03,
0x20, 0xDB, 0x14, 0x61, 0x66, 0x36, 0x97, 0x2A, 0xEF, 0x2B, 0xA8, 0xF2, 0xDA, 0x3C, 0x9E, 0xD3,
0xFE, 0x08, 0xC1, 0xFB, 0x6B, 0xFC, 0x68, 0xFD, 0xB4, 0xFE, 0x1B, 0xF8, 0xB3, 0x53, 0xF8, 0xB9,
0xA1, 0xF8, 0x26, 0xC6, 0xD7, 0x4B, 0x6B, 0x11, 0xE1, 0xDD, 0x4B, 0x44, 0x9E, 0x28, 0xEE, 0xF5,
0x78, 0x64, 0xFB, 0x4A, 0x4B, 0x25, 0xE5, 0x9A, 0x5D, 0xDC, 0x34, 0x0F, 0x98, 0x23, 0x65, 0x66,
0x58, 0x04, 0x86, 0x59, 0x02, 0xC2, 0xA2, 0x23, 0x9E, 0x13, 0xFE, 0x0A, 0x09, 0xFF, 0x00, 0x04,
0x62, 0xF1, 0x9F, 0xC7, 0xEF, 0xDB, 0x2B, 0xFE, 0x1A, 0x03, 0xE1, 0x77, 0xC4, 0x6D, 0x1B, 0x41,
0xF1, 0xD5, 0xAC, 0x7A, 0x67, 0xF6, 0x7E, 0x9B, 0xAD, 0xE8, 0xC2, 0x5B, 0x7B, 0x3B, 0xBB, 0x67,
0x8A, 0x33, 0x76, 0x2E, 0x87, 0x98, 0x4C, 0x69, 0x6E, 0x9B, 0x85, 0xB1, 0xB7, 0x3B, 0xA5, 0x04,
0x99, 0x76, 0x31, 0x8E, 0xB6, 0xFF, 0x00, 0xE0, 0x90, 0xFF, 0x00, 0xF0, 0x46, 0xAB, 0xEF, 0xF8,
0x27, 0x37, 0xC4, 0x1F, 0x12, 0x78, 0xF7, 0xC4, 0x3E, 0x34, 0xB3, 0xD7, 0xBC, 0x4B, 0xE3, 0x4D,
0x06, 0xDB, 0x4F, 0xBA, 0xD2, 0x34, 0xED, 0x33, 0xC8, 0xB4, 0xD2, 0x66, 0x32, 0x2D, 0xC5, 0xDF,
0xFA, 0x49, 0x7D, 0xD7, 0x60, 0xCC, 0xA0, 0x46, 0xC6, 0x28, 0x4A, 0x26, 0xE0, 0xC2, 0x56, 0x6D,
0xE3, 0xD4, 0x95, 0x6C, 0x33, 0xCB, 0x95, 0x24, 0x97, 0xB5, 0x53, 0xBD, 0xEC, 0xEF, 0xCA, 0xD5,
0x9A, 0x6F, 0x6B, 0x26, 0x93, 0x5D, 0x6F, 0x29, 0x6D, 0x6D, 0x79, 0x94, 0x6A, 0x7B, 0x77, 0x2F,
0xB3, 0x6F, 0xC6, 0xFF, 0x00, 0xF0, 0x7F, 0x04, 0x7F, 0xFF, 0xD9
};
int i;
int collision;
int scorevalue=8;
int startx=180;
int starty=210;
I2C1_Init();
AdcConfiguration();
start_posx=startx;
start_posy=starty;
TFT_Fill_Screen(CL_WHITE);
TFT_Set_Brush(1, CL_BLACK, 0, LEFT_TO_RIGHT, CL_BLUE, CL_BLUE);
TFT_Rectangle_Round_Edges(260,0,320,240,2);

TFT_Set_Brush(1, CL_RED, 0, LEFT_TO_RIGHT, CL_BLACK, CL_BLACK);
for(i=0;i<=13;i++){
make_rectangle(coordinatesx1[i],coordinatesy1[i],coordinatesx2[i],coordinatesy2[i]);}
TFT_Set_Brush(1, CL_BLUE, 1, LEFT_TO_RIGHT, CL_BLUE, CL_BLUE);
make_rectangle(coordinatesx1[14],coordinatesy1[14],coordinatesx2[14],coordinatesy2[14]);
flags();
while(GPIOC_IDR.B13!=0)
{collision();

TFT_Image_Jpeg(start_posx, start_posy, car_jpg);
if(GPIOD_IDR.B4==0){move_up();}
else if(GPIOB_IDR.B5==0){move_down();}
else if(GPIOD_IDR.B2==0){move_left();}
else if(GPIOA_IDR.B6==0){move_right();}

}
 options_menu();}


 void move_up(){
 int speed=getAdcReading()/205;
 TFT_Set_Brush(1, CL_WHITE, 0, LEFT_TO_RIGHT, CL_BLUE, CL_BLUE);
 make_rectangle(start_posx,start_posy,start_posx+10,start_posy+10);
 start_posy=start_posy-speed;
 delay_ms(150);
 }

 void move_down(){
 int speed=getAdcReading()/205;
 TFT_Set_Brush(1, CL_WHITE, 0, LEFT_TO_RIGHT, CL_BLUE, CL_BLUE);
 make_rectangle(start_posx,start_posy,start_posx+10,start_posy+10);
 start_posy=start_posy+speed;
 delay_ms(150);
 }
 void move_left(){
 int speed=getAdcReading()/205;
 TFT_Set_Brush(1, CL_WHITE, 0, LEFT_TO_RIGHT, CL_BLUE, CL_BLUE);
 make_rectangle(start_posx,start_posy,start_posx+10,start_posy+10);
 start_posx=start_posx-speed;
 delay_ms(150);
 }
 void move_right(){
 int speed=getAdcReading()/205;
 TFT_Set_Brush(1, CL_WHITE, 0, LEFT_TO_RIGHT, CL_BLUE, CL_BLUE);
 make_rectangle(start_posx,start_posy,start_posx+10,start_posy+10);
 start_posx=start_posx+speed;
 delay_ms(150);
 }


void make_rectangle(int x1,int y1,int x2,int y2){
TFT_Rectangle_Round_Edges(x1,y1,x2,y2,2);}

void collision(){
int i;
for(i=0;i<=18;i++){
collisionx1=coordinatesx1[i];
collisiony1=coordinatesy1[i];
collisionx2=coordinatesx2[i];
collisiony2=coordinatesy2[i];
if((start_posx>collisionx1 && start_posx<collisionx2)&& (start_posy>collisiony1 && start_posy<collisiony2)||(start_posx+10>collisionx1 && start_posx+10<collisionx2)&& (start_posy>collisiony1 && start_posy<collisiony2)||(start_posx>collisionx1 && start_posx<collisionx2)&& (start_posy+10>collisiony1 && start_posy+10<collisiony2)||(start_posx+10>collisionx1 && start_posx+10<collisionx2)&& (start_posy+10>collisiony1 && start_posy+10<collisiony2))
{if (top_score<scorevalue){top_score=scorevalue;}
EEPROM_24C02_WrSingle(1,top_score);
options_menu();
}

else if(((start_posx>=flagx && start_posx<=flagx+10)&& (start_posy>=flagy && start_posy<=flagy+10))||((start_posx+10>=flagx && start_posx+10<=flagx+10)&& (start_posy>=flagy && start_posy<=flagy+10))||((start_posx>=flagx && start_posx<=flagx+10)&& (start_posy+10>=flagy && start_posy+10<=flagy+10))||((start_posx+10>=flagx && start_posx+10<=flagx+10)&& (start_posy+10>=flagy && start_posy+10<=flagy+10)))
{for(i=0;i<5;i++)
{Sound_Play(fre1[i],duration1[i]);}
TFT_Set_Brush(1, CL_WHITE, 0, LEFT_TO_RIGHT, CL_BLUE, CL_BLUE);
TFT_Rectangle_Round_Edges(flagx,flagy,flagx+10,flagy+10,2);
scorevalue=scorevalue+8;
scoreprint();
flags();}
}
 }

void flags(){
int i;
int nosame=1;
while(nosame==1){
nosame=0;
flagx=rand()/110;
flagy=rand()/150;
for(i=0;i<=18;i++){
collisionx1=coordinatesx1[i];
collisiony1=coordinatesy1[i];
collisionx2=coordinatesx2[i];
collisiony2=coordinatesy2[i];
if((flagx>collisionx1 && flagx<collisionx2)&& (flagy>collisiony1 && flagy<collisiony2)||(flagx+10>collisionx1 && flagx+10<collisionx2)&& (flagy>collisiony1 && flagy<collisiony2)||(flagx>collisionx1 && flagx<collisionx2)&& (flagy+10>collisiony1 && flagy+10<collisiony2)||(flagx+10>collisionx1 && flagx+10<collisionx2)&& (flagy+10>collisiony1 && flagy+10<collisiony2))
{nosame=1;}}
}
TFT_Set_Brush(1, CL_GREEN, 0, LEFT_TO_RIGHT, CL_BLUE, CL_BLUE);
TFT_Rectangle_Round_Edges(flagx,flagy,flagx+10,flagy+10,2);
}

void scoreprint(){

char c=scorevalue;
TFT_Set_Brush(1, CL_BLACK, 0, LEFT_TO_RIGHT, CL_BLUE, CL_BLUE);
TFT_Rectangle_Round_Edges(260,0,320,240,2);
TFT_Write_Char(c, 270, 20);
}

void AdcConfiguration(){
 RCC_APB2ENR |= 1 << 4;
 RCC_APB2ENR |= 1 << 9 ;
 GPIOC_CRL &= ~(0xF << 0);
 ADC1_SQR1 = (0b0000 << 20);
 ADC1_SQR3 = 10;
 ADC1_SMPR1 = 0b100;
 ADC1_CR2 |= (0b111 << 17);
 ADC1_CR2.ADON = 1;
 delay_ms(10);}

unsigned int getAdcReading(){

 ADC1_CR2 |= (1 << 22) | (1 << 20);
 while(!(ADC1_SR & 0b10));
 return ADC1_DR;
}
